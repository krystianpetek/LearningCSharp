@page "/checkout";
@inject OrderState orderState;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;
@implements IDisposable;
@using BlazingPizzaSite.Services;

<div class="main">

    <EditForm OnValidSubmit="@PlaceOrder" OnInvalidSubmit="@ShowError" EditContext="@editContext">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="@Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if(isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="@Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="submit" disabled=@isError>
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => orderState.Order;
    bool isError = false;
    private EditContext editContext;

    async Task PlaceOrder()
    {
        var response = await httpClient.PostAsJsonAsync(navigationManager.BaseUri + "orders", orderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        orderState.ResetOrder();
        navigationManager.NavigateTo($"/myorders/{newOrderId}");
    }

    protected void ShowError()
    {
        isError = true;
    }

    protected override void OnInitialized()
    {
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs changedEvent)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}
