@page "/"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject OrderState orderState
@inject IJSRuntime jsRuntime
@using BlazingPizzaSite.Services

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => orderState.ShowConfigurePizzaDialog(special))"
            style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (orderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="orderState.ConfiguringPizza" OnCancel="orderState.CancelConfigurePizzaDialog"
    OnConfirm="orderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your Order</h2>
            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <a @onclick=@(async () => await ShowConfirm(configuredPizza)) class="delete-item">x</a>
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                </div>
            }


        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @( order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout"
            class="@(orderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order
        </a>
    </div>
</div>

@code {

    private List<PizzaSpecial> specials = new();
    private Order order => orderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await httpClient.GetFromJsonAsync<List<PizzaSpecial>>(navigationManager.BaseUri + "specials");

    }
    private async Task ShowConfirm(Pizza removePizza)
    {
        var messageParams = new
        {
            title = "Are you sure?",
            text = $"Do you want to remove the {removePizza.Special.Name}from your order?",
            icon = "warning",
            buttons = new
            {
                abort = new
                {
                    text = "Leave it in my order",
                    value = false
                },
                confirm = new
                {
                    text = "Remove pizza",
                    value = true
                }
            },
            dangerMode = true
        };

        if (await jsRuntime.InvokeAsync<bool>("swal", messageParams))
        {
            orderState.RemoveConfiguredPizza(removePizza);
        }
    }
}