@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

    <table class="table table-sm table-striped table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @{
                if (ProductData?.Count() > 0)
                {
                    foreach (Product product in ProductData)
                    {
                        <tr>
                            <td>@product.ProductId</td>
                            <td>@product.Name</td>
                            <td>@product.Category</td>
                            <td>@($"{product.Price:C2}")</td>
                            <td>
                                <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(product.ProductId ?? 0)">
                                    Details
                                </NavLink>
                                <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(product.ProductId ?? 0)">
                                    Edit
                                </NavLink>
                                <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProductAsync(product))">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No Products</td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <p>@Error</p>
    <NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>

@code {
    public IStoreRepository Repository => Service;

    public IEnumerable<Product> ProductData { get; set; } = Enumerable.Empty<Product>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        ProductData = await Repository.Products.ToListAsync();
    }

    public async Task DeleteProductAsync(Product product)
    {
        try
        {
            await Repository.DeleteProductAsync(product);
            await UpdateData();
        }
        catch (Exception ex)
        {
            Error = $"{ex.Message}";
        }
    }

    public string Error { get; set; } = string.Empty;

    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}