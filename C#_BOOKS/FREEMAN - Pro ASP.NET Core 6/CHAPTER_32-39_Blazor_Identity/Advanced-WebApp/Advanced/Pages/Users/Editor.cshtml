@page "{id}"
@model EditorModel

<h5 class="bg-warning text-white text-center p-2">Edit User</h5>

<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label>ID</label>
        <input 
            name="ID"
            class="form-control"
            value="@Model.Id" 
            disabled />
        <input 
            type="hidden"
            name="ID"
            value="@Model.Id" />
    </div>
    <div class="form-group">
        <label>User name</label>
        <input 
            name="UserName"
            class="form-control"
            value="@Model.UserName" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <input 
            name="Email"
            class="form-control"
            value="@Model.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <input 
            name="Password"
            type="password"
            class="form-control"
            value="@Model.Password" />
    </div>
    <div class="py-2">
        <button type="submit"
            class="btn btn-warning">
            Submit
        </button>
        <a class="btn btn-secondary"
            asp-page="List">
            Back
        </a>
    </div>
</form>

@functions{
    public class EditorModel : AdminPageModel
    {
        public UserManager<IdentityUser> UserManager;

        public EditorModel(UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }

        [BindProperty]
        public string Id { get; set; } = string.Empty;
        [BindProperty]
        public string UserName { get; set; } = string.Empty;
        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        [BindProperty]
        public string? Password { get; set; }

        public async Task OnGetAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            this.Id = user.Id;
            this.UserName = user.UserName;
            this.Email = user.Email;
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                IdentityUser user = await UserManager.FindByIdAsync(Id);
                user.UserName = this.UserName;
                user.Email = this.Email;

                IdentityResult result = await UserManager.UpdateAsync(user);
                if (result.Succeeded && !string.IsNullOrWhiteSpace(Password))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result = await UserManager.AddPasswordAsync(user, Password);
                }
                if (result.Succeeded)
                    return RedirectToPage("List");

                foreach (IdentityError error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
            }

            return Page();
        }
    }
}