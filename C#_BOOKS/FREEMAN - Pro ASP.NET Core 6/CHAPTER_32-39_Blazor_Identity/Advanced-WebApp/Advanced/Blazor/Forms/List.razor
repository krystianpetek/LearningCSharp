@page "/forms"
@page "/forms/list"
@using DataModel.Models;
@layout EmptyLayout
@inherits OwningComponentBase<DataContext>

<h5 class="bg-primary text-white text-center p-2">People</h5>

<table class="table table-sm table-bordered table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Dept</th>
            <th>Location</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if(People.Count() == 0)
        {
            <tr>
                <th colspan="5"
                    class="p-4 text-center">
                    Loading Data...
                </th>
            </tr>
        }
        else
        {
            foreach (Person person in People)
            {
                <tr>
                    <td>@person.PersonId</td>
                    <td>@person.Surname, @person.Firstname</td>
                    <td>@person.Department?.Name</td>
                    <td>@person.Location?.City</td>
                    <td class="text-center">

                        <NavLink 
                            class="btn btn-sm btn-info"
                            href="@GetDetailsUrl(person.PersonId)">
                            Details
                        </NavLink>
                        <NavLink 
                            class="btn btn-sm btn-warning"
                            href="@GetEditUrl(person.PersonId)">
                            Edit
                        </NavLink>
                        <NavLink 
                            class="btn btn-sm btn-danger"
                            @onclick="@(() => HandleDelete(person))">
                            Delete
                        </NavLink>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<NavLink class="btn btn-primary"
    href="/forms/create">
    Create
</NavLink>

<button 
    class="btn btn-primary"
    @onclick="@(() => UpdateDataAsync())"
    >
    Update
</button>
<button 
    class="btn btn-primary"
    @onclick="@(() => SortWithQuery())"
    >
    Sort (With Query)
</button>
<button 
    class="btn btn-primary"
    @onclick="@(() => SortWithoutQuery())"
    >
    Sort (No Query)
</button>

<button 
    class="btn btn-primary"
    @onclick="@(() => Counter++)"
    >
    Increment
</button>
<span class="h5">Counter: @Counter</span>


@code {
    //[Inject]
    //public DataContext? DataContext { get; set; }

    public DataContext? OwnDataContext => Service;

    public int Counter { get; set; } = 0;

    private string GetEditUrl(long id) => $"/forms/edit/{id}";

    private string GetDetailsUrl(long id) => $"/forms/details/{id}";

    public IEnumerable<Person> People { get; set; } = Enumerable.Empty<Person>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    private IQueryable<Person> Query =>
        OwnDataContext!.People
        .Include(person => person.Department)
        .Include(person => person.Location);

    private async Task UpdateDataAsync(IQueryable<Person>? query = null) 
    {
        People = await (query ?? Query).ToListAsync<Person>();
    }

    public async Task SortWithQuery()
    {
        await UpdateDataAsync(Query.OrderBy(person => person.Surname));
    }

    public void SortWithoutQuery()
    {
        People = People.OrderBy(person => person.Firstname);
    }

    public async Task HandleDelete(Person person)
    {
        if(OwnDataContext != null && person != default)
        {
            OwnDataContext.Remove(person);
            await OwnDataContext.SaveChangesAsync();
            await UpdateDataAsync();
        }
    }
}
