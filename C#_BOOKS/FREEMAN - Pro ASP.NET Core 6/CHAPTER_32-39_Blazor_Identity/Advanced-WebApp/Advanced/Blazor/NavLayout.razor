@using Advanced.Services;
@inherits LayoutComponentBase

<div class="container-fluid">
    <div class="row">
        <div class="col-3">
            <div class="d-grid gap-2">
                @{
                    foreach(string key in NavLinks.Keys)
                    {
                        <NavLink
                            class="btn btn-outline-primary"
                            href="@NavLinks[key]"
                            ActiveClass="btn-primary text-white"
                            Match="NavLinkMatch.Prefix">
                            @key
                        </NavLink>
                    }
                    
                    foreach(string key in MultiNavLinks.Keys)
                    {
                        <MultiNavLink 
                            ActiveClass="btn-primary text-white"
                            Class="btn btn-outline-primary btn-block"
                            Href="@MultiNavLinks[key]"
                            DisabledClass="btn btn-dark text-light btn-block disabled"
                            @ref="Refs[key]" >
                            @key
                        </MultiNavLink>
                    }
                    <button class=" btn btn-secondary btn-block mt-5" @onclick="ToggleLinks">
                        Toggle Links
                    </button>
                }
            </div>
        </div>
        <div class="col">
            @(Body)
        </div>
    </div>
</div>

@code {
    [Inject]
    public ToggleService? Toggler { get; set; }

    [Inject]
    public IJSRuntime? JsRuntime { get; set; }

    public Dictionary<string, string> NavLinks = new Dictionary<string, string>
    {
        { "People", "/people" },
        {"Departments", "/depts"},
        { "Details", "/person" },
    };

    public Dictionary<string, string[]> MultiNavLinks = new Dictionary<string, string[]>
    {
        { "People", new string[] { "/people" ,"/" } },
        { "Departments", new string[] { "/depts", "departments" } },
        { "Details", new string[] { "/person" } }
    };

    // private bool LinksEnabled = true;

    public Dictionary<string, MultiNavLink> Refs = new Dictionary<string, MultiNavLink>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && Toggler != null)
        {
            Toggler?.EnrolComponents(Refs.Values);
        }
        await JsRuntime!.InvokeVoidAsync("createToggleButton");

        await JsRuntime!.InvokeVoidAsync("createToggleButton", DotNetObjectReference.Create(Toggler)); // invoke method using ToggleService
    }

    public void ToggleLinks()
    {
        Toggler?.ToggleComponents();
    }
}
