@page "/handleselector/{id:long?}"
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.EntityFrameworkCore;
@using WebApp.Models;
@model HandlerSelectorModel

<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="/lib/bootstrap/css/bootstrap.min.css"/>
    </head>
    <body>
        <div class="bg-primary text-white text-center m-2 p-2">Selector</div>
        <div class="m-2">
            <table class="table table-sm table-striped table-bordered">
                <tbody>
                    <tr><th>Name</th><td>@Model.Product?.Name</td></tr>
                    <tr><th>Price</th><td>@Model.Product?.Price</td></tr>
                    <tr><th>Category</th><td>@Model.Product?.Category?.Name</td></tr>
                    <tr><th>Supplier</th><td>@Model.Product?.Supplier?.Name</td></tr>
                </tbody>
            </table>
            <a href="/handleselector/@Model.Product?.ProductId" class="btn btn-primary">Standard</a>
            <a href="/handleselector/@Model.Product?.ProductId?handler=related" class="btn btn-primary">Related</a>
        </div>
    </body>
</html>

@functions{
    public class HandlerSelectorModel : PageModel
    {
        private readonly DataContext _dataContext;
        public Product? Product{ get; set; }

        public HandlerSelectorModel(DataContext dataContext)
        {
            _dataContext = dataContext;
        }

        public async Task OnGetAsync(long id = 1)
        {
            Product = await _dataContext.Products.FindAsync(id);
        }

        public async Task OnGetRelatedAsync(long id = 1)
        {
            Product = await _dataContext.Products
            .Include(supplier => supplier.Supplier)
            .Include(category => category.Category)
            .FirstOrDefaultAsync(product => product.ProductId == id);

            if(Product is not null && Product?.Supplier is not null)
            {
                Product.Supplier.Products = null;
            }

            if(Product is not null && Product?.Category is not null)
            {
                Product.Category.Products = null;
            }
        }
    }
}